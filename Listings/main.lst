C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\ProgramFiles2\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\incl
                    -ude) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          //======================================================
   2          // Main program routine
   3          // - Device name  : MC96F6432
   4          // - Package type : 44MQFP
   5          //======================================================
   6          // For XDATA variable : V1.041.00 ~
   7          #define         MAIN    1
   8          
   9          // Generated    : Sat, Jan 06, 2018 (12:08:12)
  10          #include "app_main.h"
  11          #include "MC96F6432.h"
  12          #include "func_def.h"
  13          
  14          
  15          /*******************************************************************
  16          函数原型：
  17          输入参数：
  18          输出参数：
  19          函数功能：
  20          *******************************************************************/
  21          void main()
  22          {
  23   1              while(1)
  24   1              {
  25   2                      cli();                  // disable INT. during peripheral setting
  26   2                      port_init();            // initialize ports
  27   2                      clock_init();           // initialize operation clock
  28   2                      ADC_init();             // initialize A/D convertor
  29   2                      LCD_init();             // initialize LCD
  30   2                      Timer0_init();          // initialize Timer0
  31   2                      Timer2_init();          // initialize Timer2
  32   2                      Timer3_init();          // initialize Timer3
  33   2                      Timer4_init();          // initialize Timer4
  34   2                      UART0_init();           // initialize UART interface
  35   2                      WT_init();              // initialize Watch timer
  36   2                      WDT_init();
  37   2                      sei();                  // enable INT.  
  38   2                      app_main();
  39   2                      BootLoader_handle();
  40   2              }
  41   1      }
  42          
  43          /*******************************************************************
  44          函数原型：
  45          输入参数：
  46          输出参数：
  47          函数功能：
  48          *******************************************************************/
  49          void INT_USI1_Rx() interrupt 3
  50          {
  51   1              uint8_t tmp;
  52   1              tmp=USI1DR;     
  53   1              USI1ST1&=~0x20;
  54   1              Uart1_Rx_TimeOut=10;
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 2   

  55   1              if(Uart1_ReceiveBuffer_A_B)
  56   1              {
  57   2                      if(Uart1_Rx_Pointer<UART1_LEN_BUFFER)   
  58   2                              Uart1_ReceiveBuffer_A[Uart1_Rx_Pointer++]=tmp;
  59   2                      if(tmp=='\n')
  60   2                      {
  61   3                              Uart1_Rx_Pointer =0;
  62   3                              Uart1_RX_Finish_A=1;
  63   3                              Uart1_ReceiveBuffer_A_B=~Uart1_ReceiveBuffer_A_B;
  64   3                      }
  65   2              }
  66   1              else
  67   1              {
  68   2                      if(Uart1_Rx_Pointer<UART1_LEN_BUFFER)   
  69   2                              Uart1_ReceiveBuffer_B[Uart1_Rx_Pointer++]=tmp;
  70   2                      if(tmp=='\n')
  71   2                      {
  72   3                              Uart1_Rx_Pointer =0;
  73   3                              Uart1_RX_Finish_B=1;
  74   3                              Uart1_ReceiveBuffer_A_B=~Uart1_ReceiveBuffer_A_B;
  75   3                      }
  76   2              }
  77   1      }
  78          
  79          /*******************************************************************
  80          函数原型：
  81          输入参数：
  82          输出参数：
  83          函数功能：
  84          *******************************************************************/
  85          void INT_USI1_Tx() interrupt 4
  86          {
  87   1              USI1ST1&=~0x80;
  88   1              if(Uart1_EnableSend)
  89   1              {                
  90   2                      Uart1_Tx_TimeOut=10;
  91   2                      USI1DR=Uart1_TransmitBuffer[Uart1_Tx_Pointer++];
  92   2                      if(Uart1_TransmitBuffer[Uart1_Tx_Pointer]=='\0')
  93   2                              Uart1_EnableSend=0;
  94   2              }
  95   1      }
  96          
  97          /*******************************************************************
  98          函数原型：
  99          输入参数：
 100          输出参数：
 101          函数功能：
 102          *******************************************************************/
 103          void INT_USI0_Rx() interrupt 9
 104          {
 105   1              uint8_t tmp;
 106   1              tmp=USI0DR;     
 107   1              USI0ST1&=~0x20;
 108   1              Uart0_ReceiveBuffer[mUart0_Rx_Pointer]=tmp;
 109   1              if(++mUart0_Rx_Pointer>=(UART0_RX_LEN_BUFFER-1))        
 110   1                      mUart0_Rx_Pointer=0;
 111   1      }
 112          
 113          /*******************************************************************
 114          函数原型：
 115          输入参数：
 116          输出参数：
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 3   

 117          函数功能：
 118          *******************************************************************/
 119          void INT_USI0_Tx() interrupt 10
 120          {
 121   1              USI0ST1&=~0x80;
 122   1              if(Uart0_EnableSend)
 123   1              {                
 124   2                      Uart0_Tx_TimeOut=10;
 125   2                      USI0DR=Uart0_TransmitBuffer[Uart0_Tx_Pointer++];
 126   2                      if(Uart0_TransmitBuffer[Uart0_Tx_Pointer]=='\0')
 127   2                              Uart0_EnableSend=0;
 128   2              }
 129   1      }
 130          
 131          /*******************************************************************
 132          函数原型：
 133          输入参数：
 134          输出参数：
 135          函数功能：
 136          *******************************************************************/
 137          void INT_Timer0() interrupt 13
 138          {
 139   1              sys_tick(); 
 140   1      }
 141          
 142          /*******************************************************************
 143          函数原型：
 144          输入参数：
 145          输出参数：
 146          函数功能：
 147          *******************************************************************/
 148          void INT_Timer2() interrupt 15
 149          {
 150   1              // Timer2 interrupt
 151   1              // TODO: add your code here
 152   1      }
 153          
 154          /*******************************************************************
 155          函数原型：
 156          输入参数：
 157          输出参数：
 158          函数功能：
 159          *******************************************************************/
 160          void INT_Timer3() interrupt 16
 161          {
 162   1              led_rgb_drive();
 163   1              voice_in_timer();
 164   1      }
 165          
 166          /*******************************************************************
 167          函数原型：
 168          输入参数：
 169          输出参数：
 170          函数功能：
 171          *******************************************************************/
 172          void INT_Timer4() interrupt 17
 173          {
 174   1              // Timer4 interrupt
 175   1              // TODO: add your code here
 176   1              if (T4ISR & 0x80) 
 177   1                      T4ISR &= ~0x80; // clear IOVR
 178   1              if (T4ISR & 0x40) 
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 4   

 179   1                      T4ISR &= ~0x40; // clear IBTM
 180   1              if (T4ISR & 0x20) 
 181   1                      T4ISR &= ~0x20; // clear ICMA
 182   1              if (T4ISR & 0x10) 
 183   1                      T4ISR &= ~0x10; // clear ICMB
 184   1              if (T4ISR & 0x08) 
 185   1                      T4ISR &= ~0x08; // clear ICMC
 186   1      }
 187          
 188          /*******************************************************************
 189          函数原型：
 190          输入参数：
 191          输出参数：
 192          函数功能：
 193          *******************************************************************/
 194          void INT_WT() interrupt 20
 195          {
 196   1              gbHalfSecond=(!gbHalfSecond);
 197   1              if(gbHalfSecond)
 198   1              {
 199   2                      if(++gRTC_Sec>59) 
 200   2                      {
 201   3                              gRTC_Sec=0;
 202   3                              if(++gRTC_Minute>59)
 203   3                              {
 204   4                                      gRTC_Minute=0;
 205   4                                      if(++gRTC_Hour>23)
 206   4                                      {       
 207   5                                              gRTC_Hour=0;
 208   5                                              gRTC_Week<<=1;
 209   5                                              if(gRTC_Week==0x80)
 210   5                                                      gRTC_Week=0x01;
 211   5                                      }
 212   4                              }
 213   3                      }
 214   2      //              if(++gRTC_Minute>59)
 215   2      //              {
 216   2      //                      gRTC_Minute=0;
 217   2      //                      if(++gRTC_Hour>23)
 218   2      //                      {       
 219   2      //                              gRTC_Hour=0;
 220   2      //                              gRTC_Week<<=1;
 221   2      //                              if(gRTC_Week==0x80)
 222   2      //                                      gRTC_Week=0x01;
 223   2      //                      }
 224   2      //              }
 225   2              }
 226   1      }
 227          
 228          /*******************************************************************
 229          函数原型：
 230          输入参数：
 231          输出参数：
 232          函数功能：
 233          *******************************************************************/
 234          unsigned int ADC_read()
 235          {
 236   1              unsigned int adcVal;
 237   1              adcVal = ((ADCDRH << 8) | ADCDRL);      
 238   1              return  adcVal;
 239   1      }
 240          
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 5   

 241          /*******************************************************************
 242          函数原型：
 243          输入参数：
 244          输出参数：
 245          函数功能：
 246          *******************************************************************/
 247          void ADC_init()
 248          {
 249   1              // initialize A/D convertor
 250   1              ADCCRL = 0x80;          // setting
 251   1              ADCCRH = 0x07;          // trigger source, alignment, frequency
 252   1      }
 253          
 254          /*******************************************************************
 255          函数原型：
 256          输入参数：
 257          输出参数：
 258          函数功能：
 259          *******************************************************************/
 260          void ADC_start(unsigned char ch)
 261          {
 262   1              // start A/D convertor
 263   1              ADCCRL  = (ADCCRL & 0xf0) | (ch & 0x0f);        // select channel
 264   1              ADCCRL |= 0x40;         // start ADC
 265   1      }
 266          
 267          /*******************************************************************
 268          函数原型：
 269          输入参数：
 270          输出参数：
 271          函数功能：
 272          *******************************************************************/
 273          void LCD_init()
 274          {
 275   1              // initialize LCD
 276   1              // Frame freq. = 16.000000Hz
 277   1              LCDCRH = 0x00;          // LCD control High
 278   1              LCDCRL = 0x00;          // LCD control Low
 279   1              LCDCCR = 0x00;          // LCD contrast
 280   1      }
 281          
 282          /*******************************************************************
 283          函数原型：
 284          输入参数：
 285          输出参数：
 286          函数功能：
 287          *******************************************************************/
 288          void Timer2_init()
 289          {
 290   1              // initialize Timer2
 291   1              // 16bit PWM, period = 1.000000mS ( 1000.000000Hz )
 292   1              //     PWM duty = 50.000000%
 293   1              T2CRH = 0x30;           // PWM setting High, 1 shot mode
 294   1                                                      //T2CRH |= 0x30;        // PWM repeat mode
 295   1              T2CRL = 0xD1;           // PWM setting Low
 296   1              T2BDRH = 0x01;          // duty High 占空比
 297   1              T2BDRL = 0xF3;          // duty Low
 298   1              T2ADRH = 0x03;          // period count High  周期
 299   1              T2ADRL = 0xE7;          // period count Low
 300   1              IE2 |= 0x08;            // Enable Timer2 interrupt
 301   1              //T2CRH |= 0x80;        // enable counter
 302   1      
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 6   

 303   1      }
 304          
 305          /*******************************************************************
 306          函数原型：
 307          输入参数：
 308          输出参数：
 309          函数功能：
 310          *******************************************************************/
 311          void Timer4_init()
 312          {
 313   1                      // initialize Timer4
 314   1              // 10bit PWM, period = 1.000000mS ( 1000.000000Hz )
 315   1              //     PWM A duty = 50.000000%
 316   1              //     PWM B duty = 50.000000%
 317   1              //     PWM C duty = 50.000000%
 318   1              T4CR   = 0x24;          // PWM setting
 319   1              T4PCR1 = 0x88;          // enable PWM
 320   1              T4PPRL = 0xE7;          // period Low 
 321   1              T4PPRH = 0x03;          // period High 
 322   1              T4ADRL = 0xF3;          // duty Low 
 323   1              T4ADRH = 0x01;          // duty High 
 324   1              T4BDRL = 0xF3;          // duty Low
 325   1              T4BDRH = 0x01;          // duty High
 326   1              T4CDRL = 0xF3;          // duty Low
 327   1              T4CDRH = 0x01;          // duty High
 328   1              T4PCR2 = 0x20;          // enable PWM output，只开了PWM4AA，
 329   1              //T4PCR2 = 0x10;        // enable PWM output
 330   1              T4PCR3 = 0X00;          // set PWM output polarity
 331   1              T4DLYA = 0x00;          // TODO: do yourself, PWM dalay AA & AB
 332   1              T4DLYB = 0x00;          // TODO: do yourself, PWM dalay BA & BB
 333   1              T4DLYC = 0x00;          // TODO: do yourself, PWM dalay CA & CB
 334   1              T4MSK  = 0x90;          // TODO: do yourself, interrupt masking
 335   1              IE2   |= 0x20;          // Enable Timer4 interrupt
 336   1              T4CR  |= 0x10;          // clear counter
 337   1      }
 338          
 339          /*******************************************************************
 340          函数原型：
 341          输入参数：
 342          输出参数：
 343          函数功能：
 344          *******************************************************************/
 345          void WDT_clear()
 346          {
 347   1              WDTCR |= 0x20;          // Clear Watch-dog timer
 348   1      }
 349          
 350          /*******************************************************************
 351          函数原型：
 352          输入参数：
 353          输出参数：
 354          函数功能：
 355          *******************************************************************/
 356          void WDT_init()
 357          {
 358   1              // initialize Watch-dog timer
 359   1              WDTDR = 0x01;           // period
 360   1              WDTCR = 0xC0;           // setting
 361   1              WDTCR |= 0x02;  // Use WDTRC
 362   1              WDT_clear();
 363   1      }
 364          
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 7   

 365          /*******************************************************************
 366          函数原型：
 367          输入参数：
 368          输出参数：
 369          函数功能：
 370          *******************************************************************/
 371          void Timer0_init()
 372          {
 373   1              // initialize Timer0
 374   1              // 8bit timer, period = 1.002667mS
 375   1              T0CR  = 0x88;           // timer setting
 376   1              T0DR  = 0x5D;           // period count
 377   1              IE2  |= 0x02;           // Enable Timer0 interrupt
 378   1              T0CR |= 0x01;           // clear counter
 379   1      }
 380          
 381          /*******************************************************************
 382          函数原型：
 383          输入参数：
 384          输出参数：
 385          函数功能：
 386          *******************************************************************/
 387          void Timer3_init()
 388          {
 389   1              // initialize Timer3
 390   1              // 8bit timer, period = 0.050000mS
 391   1              T3CR  = 0x8A;           // timer setting
 392   1              T3DR  = 0x4A;           // period count
 393   1              IE2  |= 0x10;           // Enable Timer3 interrupt
 394   1              T3CR |= 0x01;           // clear counter
 395   1      }
 396          
 397          /*******************************************************************
 398          函数原型：
 399          输入参数：
 400          输出参数：
 401          函数功能：
 402          *******************************************************************/
 403          void UART0_init()
 404          {
 405   1              // initialize UART interface
 406   1              // UART0 : ASync. 57692bps N 8 1
 407   1              USI0CR2  = 0x02;        // activate USI0
 408   1              USI0CR1  = 0x06;        // Async/Sync, bit count, parity
 409   1              USI0CR2 |= 0xEC;        // interrupt, speed
 410   1              USI0CR3  = 0x00;        // stop bit
 411   1              USI0BD   = 0x0C;        // baud rate
 412   1              IE1     |= 0x18;        // enable UART0 interrupt       
 413   1      }
 414          
 415          /*******************************************************************
 416          函数原型：
 417          输入参数：
 418          输出参数：
 419          函数功能：
 420          *******************************************************************/
 421          bit enUart1=0;
 422          void UART1_init()
 423          {
 424   1              // UART1 : ASync. 9615bps N 8 1
 425   1              if(!enUart1)
 426   1              {
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 8   

 427   2                      USI1CR2  = 0x02;        // activate USI1
 428   2                      USI1CR1  = 0x06;        // Async/Sync, bit count, parity
 429   2                      USI1CR2 |= 0xEC;        // interrupt, speed
 430   2                      USI1CR3  = 0x00;        // stop bit
 431   2                      USI1BD   = 0x4D;        // baud rate
 432   2                      IE      |= 0x18;        // enable UART1 interrupt
 433   2              }
 434   1              enUart1=1;
 435   1      }
 436          
 437          /*******************************************************************
 438          函数原型：
 439          输入参数：
 440          输出参数：
 441          函数功能：
 442          *******************************************************************/
 443          void UART1_def_init()
 444          {
 445   1              // UART1 : ASync. 9615bps N 8 1
 446   1              if(enUart1)
 447   1              {
 448   2                      USI1CR2 = 0x00;         // activate USI1
 449   2                      USI1CR1 = 0x00;         // Async/Sync, bit count, parity
 450   2                      USI1CR2 = 0x00;   // interrupt, speed
 451   2                      USI1CR3 = 0x00;         // stop bit
 452   2                      USI1BD  = 0x00;         // baud rate
 453   2                      IE     &=~0x18;  // enable UART1 interrupt
 454   2              }
 455   1              enUart1=0;
 456   1      }
 457          
 458          /*******************************************************************
 459          函数原型：
 460          输入参数：
 461          输出参数：
 462          函数功能：
 463          *******************************************************************/
 464          void WT_init()
 465          {
 466   1              // initialize Watch timer
 467   1              WTCR = 0x88;            // setting
 468   1              WTDR = 0x01;            // set duty
 469   1              WTDR = 0x81;            // clear WT
 470   1              IE3 |= 0x04;            // Enable WT interrupt
 471   1      }
 472          
 473          /*******************************************************************
 474          函数原型：
 475          输入参数：
 476          输出参数：
 477          函数功能：
 478          *******************************************************************/
 479          void clock_init()
 480          {
 481   1              // external clock
 482   1              XTFLSR = 0xA8;          // MC96F6432A only, others ignore this line
 483   1              OSCCR  = 0x0A;          // Enable int. 1MHz and Ext. OSC
 484   1              BITCR  = 0x09;          // Set waiting time : 16ms@1MHz
 485   1              while((BITCR & 0x80) == 0);     // Ext. OSC stabilizing time
 486   1              SCCR   = 0x01;          // Change to Ext. OSC
 487   1              OSCCR |= 0x05;          // Disable Int. OSC
 488   1      
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 9   

 489   1              IE |= 0x80;//总中断打开
 490   1      }
 491          
 492          /*******************************************************************
 493          函数原型：
 494          输入参数：
 495          输出参数：
 496          函数功能：
 497          *******************************************************************/
 498          void port_init()
 499          {
 500   1              // initialize ports
 501   1              //   1 : P55      out 
 502   1              //   2 : RxD0     in  
 503   1              //   3 : TxD0     out 
 504   1              //   4 : P42      out 
 505   1              //   5 : P43      out 
 506   1              //   6 : P37      out 
 507   1              //   7 : P36      out 
 508   1              //   8 : P35      out 
 509   1              //   9 : P34      out 
 510   1              //  10 : P33      out 
 511   1              //  11 : P32      out 
 512   1              //  12 : P31      out 
 513   1              //  13 : P30      in  
 514   1              //  14 : P27      out 
 515   1              //  15 : P26      in  
 516   1              //  16 : P25      out 
 517   1              //  17 : P24      out 
 518   1              //  18 : P23      out 
 519   1              //  19 : P22      out 
 520   1              //  20 : P21      out 
 521   1              //  21 : TxD1     out 
 522   1              //  22 : RxD1     in  
 523   1              //  23 : P11      out 
 524   1              //  24 : P12      in  
 525   1              //  25 : P13      out 
 526   1              //  26 : P14      out 
 527   1              //  27 : P15      out 
 528   1              //  28 : P16      in  
 529   1              //  29 : P17      out 
 530   1              //  30 : AN5      in  
 531   1              //  31 : P06      out 
 532   1              //  32 : P05      out 
 533   1              //  33 : P04      out 
 534   1              //  34 : P03      out 
 535   1              //  35 : P02      out 
 536   1              //  36 : P01      out 
 537   1              //  37 : P00      out 
 538   1              //  40 : P50      out 
 539   1              //  41 : P51      out 
 540   1              //  42 : P52      out 
 541   1              //  43 : SXIN     in  
 542   1              //  44 : SXOUT    out 
 543   1              P0IO = 0x7F;            // direction  为1为输出，P11输入
 544   1              P0PU = 0x00;            // pullup
 545   1              P0OD = 0x00;            // open drain
 546   1              P0DB = 0x00;            // bit7~6(debounce clock), bit5~0=P07~02 debounce
 547   1              P0   = 0x00;            // port initial value
 548   1      
 549   1              P1IO = 0x9A;            // direction
 550   1              P1PU = 0x20;            // pullup
C51 COMPILER V9.00   MAIN                                                                  08/23/2018 10:55:37 PAGE 10  

 551   1              P1OD = 0x00;            // open drain
 552   1              P15DB = 0x00;           // debounce : P54, 52, 17, 16, 12, 11
 553   1              P1   = 0x00;            // port initial value
 554   1      
 555   1              P2IO = 0xFF;            // direction
 556   1              P2PU = 0x00;            // pullup
 557   1              P2OD = 0x02;            // open drain
 558   1              P2   = 0x00;            // port initial value
 559   1      
 560   1              P3IO = 0xBE;            // direction
 561   1              P3PU = 0x00;            // pullup
 562   1              P3   = 0x00;            // port initial value
 563   1      
 564   1              P4IO = 0xFA;            // direction P43输出,P42输入
 565   1              P4PU = 0x08;            // pullup，P43为上拉
 566   1              P4OD = 0x00;            // open drain
 567   1              P4   = 0x00;            // port initial value
 568   1      
 569   1              P5IO = 0xFF;            // direction
 570   1              P5PU = 0x00;            // pullup
 571   1              P5   = 0x00;            // port initial value
 572   1      
 573   1              // Set port functions
 574   1              P0FSRH = 0x20;          // P0 selection High 
 575   1              P0FSRL = 0x1E;          // P0 selection Low F0FSRL4/3、2/1为0001_1110,开启PWM4AB、A
 576   1              P1FSRH = 0x00;          // P1 selection High
 577   1              P1FSRL = 0x0F;          // P1 selection Low
 578   1              P2FSRH = 0x00;          // P2 selection High
 579   1              P2FSRL = 0x03;          // P2 selection Low
 580   1              P3FSR  = 0x00;          // P3 selection
 581   1              P4FSR  = 0x0A;          // P4 selection
 582   1              P5FSR  = 0x2D;          // P5 selection
 583   1      }
 584          
 585          
 586          
 587          
 588          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1023    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
